WORD PATTERNS



class Solution {
  public boolean wordPattern(String pattern, String str) {
    String[] words = str.split(" ");
    if (words.length != pattern.length())
      return false;

    Map<Character, Integer> charToIndex = new HashMap<>();
    Map<String, Integer> stringToIndex = new HashMap<>();

    for (Integer i = 0; i < pattern.length(); ++i)
      if (charToIndex.put(pattern.charAt(i), i) != stringToIndex.put(words[i], i))
        return false;

    return true;
  }
}



PARTITION LEVELS


class Solution {
  public List<Integer> partitionLabels(String S) {
    List<Integer> ans = new ArrayList<>();
    int[] rightmost = new int[128];

    for (int i = 0; i < S.length(); ++i)
      rightmost[S.charAt(i)] = i;

    int l = 0; // first index of current running string
    int r = 0; // right most so far

    for (int i = 0; i < S.length(); ++i) {
      r = Math.max(r, rightmost[S.charAt(i)]);
      if (r == i) {
        ans.add(i - l + 1);
        l = i + 1;
      }
    }

    return ans;
  }
}

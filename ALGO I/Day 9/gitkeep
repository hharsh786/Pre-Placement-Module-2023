01 MATRIX



class Solution {
  public int[][] updateMatrix(int[][] mat) {
    final int m = mat.length;
    final int n = mat[0].length;
    final int[] dirs = new int[] {0, 1, 0, -1, 0};
    Queue<int[]> q = new ArrayDeque<>();
    boolean[][] seen = new boolean[m][n];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        if (mat[i][j] == 0) {
          q.offer(new int[] {i, j});
          seen[i][j] = true;
        }

    while (!q.isEmpty()) {
      final int i = q.peek()[0];
      final int j = q.poll()[1];
      for (int k = 0; k < 4; ++k) {
        final int x = i + dirs[k];
        final int y = j + dirs[k + 1];
        if (x < 0 || x == m || y < 0 || y == n)
          continue;
        if (seen[x][y])
          continue;
        mat[x][y] = mat[i][j] + 1;
        q.offer(new int[] {x, y});
        seen[x][y] = true;
      }
    }

    return mat;
  }
}





ROTATING ORANGES



class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
       
        
        Queue<int[]> q = new LinkedList<>();
        
        for(int i =0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.add(new int[]{i,j,0});
                    //visited[i][j]=true;
                }
            }
        }
        int min =0;
        int level =0;
        while(!q.isEmpty()){
            int size = q.size();
            
            for(int i =0;i<size;i++){
                int[] top = q.poll();
                int r = top[0];
                int c = top[1];
                min = top[2];
                
                int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
                for(int[] dir : dirs){
                    int nr = r+dir[0];
                    int nc = c+dir[1];
                    
                    if(nr<0 || nc<0 || nr>=m || nc>=n || grid[nr][nc]==0 || grid[nr][nc]==2 ){
                        continue;
                    }
                    if( grid[nr][nc]==1){
                        grid[nr][nc] = 2;
                        q.add(new int[]{nr,nc,min+1});
                    }
                }
            }
            if(!q.isEmpty()){
                level++;
            }
        }
        
         for(int i =0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
                
            }
        return level;
    }
}

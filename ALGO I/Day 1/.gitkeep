BINARY SEARCH



class Solution {
    public int search(int[] nums, int target) {
        int lo = 0, hi = nums.length - 1;
        while (lo <= hi) {
            int mi = lo + (hi - lo) / 2;
            if (nums[mi] == target) return mi;
            else if (nums[mi] < target) lo = mi + 1;
            else hi = mi - 1;
        }
        return -1;
    }
}


FIRST BAD VERSION



public class Solution extends VersionControl {
  public int firstBadVersion(int n) {
    int l = 1;
    int r = n;

    while (l < r) {
      final int m = l + (r - l) / 2;
      if (isBadVersion(m))
        r = m;
      else
        l = m + 1;
    }

    return l;
  }
}



SEARCH INSERT POSITION




class Solution {
    public int searchInsert(int[] nums, int target) {
        int result = 0;
        
        if(nums.length==1 && target>nums[0]){
            return 1;
        }
        
        for(int i=0;i<nums.length-1;i++){
            if(target == nums[i]){
                result =  i;
                break;
            }else if(target>nums[i] && target<=nums[i+1]){
                result = i+1;
                break;
            }else if(target>nums[i+1] && (nums.length-1==i+1)){
                result= nums.length;
                break;
            }else if(target<nums[i] && i==0){
                result =  0;
                break;
            }else if(target>nums[i] && target>nums[i+1]){
                continue;
            }
        }
        
        return result;
        
    }
}
